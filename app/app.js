var datapineTestTaskApp=angular.module("datapineTestTaskApp",["ui.router","highcharts-ng"]);angular.module("datapineTestTaskApp").controller("AboutCtrl",["$scope",function(t){t.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}]),angular.module("datapineTestTaskApp").controller("MainCtrl",["$scope",function(){}]),angular.module("datapineTestTaskApp").config(["$stateProvider","$urlRouterProvider",function(t,a){a.otherwise("/home"),t.state("home",{url:"/home",templateUrl:"views/home.html",controller:"MainCtrl"}).state("about",{url:"/about",templateUrl:"views/about.html",controller:"AboutCtrl"}).state("barchart",{url:"/barchart",templateUrl:"views/charts/bar-chart.html",controller:"BarchartCtrl"}).state("piechart",{url:"/piechart",templateUrl:"views/charts/pie-chart.html",controller:"PiechartCtrl"}).state("chart3d",{url:"/3dchart",templateUrl:"views/charts/3D-chart.html",controller:"chart3dCtrl"}).state("areachart",{url:"/areachart",templateUrl:"views/charts/area-chart.html",controller:"AreaChartCtrl"})}]),angular.module("datapineTestTaskApp").controller("chart3dCtrl",["$scope","$http",function(t,a){function e(a){t.highcharts3D=a,r=t.highcharts3D.options.chart.options3d.alpha,o=t.highcharts3D.options.chart.options3d.beta}var r=null,o=null;a.get("charts-data.json").success(function(t){e(t.chart3D)}).error(function(t){console.log("Request failed:"+t)}),t.alphaIncrease=function(){35>r&&(r+=10),console.log(r),t.highcharts3D.options.chart.options3d.alpha=r},t.alphaDecrease=function(){var a=-15;r>a&&(r-=10),console.log(r),t.highcharts3D.options.chart.options3d.alpha=r},t.betaIncrease=function(){45>o&&(o+=10),console.log(o),t.highcharts3D.options.chart.options3d.beta=o},t.betaDecrease=function(){var a=-5;o>a&&(o-=10),console.log(o),t.highcharts3D.options.chart.options3d.beta=o},t.addSeries=function(){for(var a=[],e=0;4>e;e++)a.push(Math.floor(20*Math.random())+1);var r={name:"Random team",data:a,stack:"Random project"};t.highcharts3D.series.push(r),t.highcharts3D.xAxis.categories.push("Random ctg."),console.log(t.highcharts3D)}}]),angular.module("datapineTestTaskApp").controller("AreaChartCtrl",["$scope","$http",function(t,a){function e(a){t.highchartsArea=a;for(var e=[],r=0;2>r;r++){for(var o=0;35>o;o++)e.push(Math.floor(1e3*Math.random())+1);t.highchartsArea.series[r].data=e,e=[]}}a.get("charts-data.json").success(function(t){e(t.areaChart)}).error(function(t){console.log("Request failed:"+t)}),t.swapChartType=function(){"area"===t.highchartsArea.options.chart.type?(t.highchartsArea.options.chart={type:"column",margin:75,options3d:{enabled:!0,alpha:10,beta:25,depth:70}},t.highchartsArea.options.plotOptions={column:{depth:25}},t.highchartsArea.yAxis={opposite:!0}):(t.highchartsArea.options.chart={type:"area"},t.highchartsArea.options.plotOptions={area:{pointStart:0,marker:{enabled:!1,symbol:"circle",radius:2,states:{hover:{enabled:!0}}}}},t.highchartsArea.yAxis={title:{text:"Random values"}})},t.addSeries=function(){for(var a=[],e=0;35>e;e++)a.push(Math.floor(1e3*Math.random())+1);t.highchartsArea.series.push({name:"Random series",data:a})}}]),angular.module("datapineTestTaskApp").controller("BarchartCtrl",["$scope","$http",function(t,a){function e(a){t.highchartsBar=a}a.get("charts-data.json").success(function(t){e(t.barChart)}).error(function(t){console.log("Request failed:"+t)}),t.addSeries=function(){for(var a=[],e=0;6>e;e++)a.push(Math.floor(20*Math.random())+1);t.highchartsBar.series.push({data:a})},t.removeRandomSeries=function(){var a=t.highchartsBar.series,e=Math.floor(Math.random()*a.length);a.splice(e,1)},t.options={type:"line"},t.swapChartType=function(){t.highchartsBar.options.chart.type="line"===t.highchartsBar.options.chart.type?"bar":"line"}}]),angular.module("datapineTestTaskApp").controller("PiechartCtrl",["$scope","$http",function(t,a){function e(a){t.highchartsPie=a,console.log(t.highchartsPie)}a.get("charts-data.json").success(function(t){e(t.pieChart)}).error(function(t){console.log("Request failed:"+t)}),t.swapChartType=function(){"0%"===t.highchartsPie.series[0].innerSize?(t.highchartsPie.options.plotOptions.pie.startAngle="-90",t.highchartsPie.options.plotOptions.pie.endAngle="90",t.highchartsPie.series[0].innerSize="50%"):(t.highchartsPie.options.plotOptions.pie.startAngle="-180",t.highchartsPie.options.plotOptions.pie.endAngle="180",t.highchartsPie.series[0].innerSize="0%")},t.showLegend=function(){t.highchartsPie.options.plotOptions.pie.showInLegend===!1?(t.highchartsPie.options.plotOptions.pie.showInLegend=!0,t.highchartsPie.options.plotOptions.pie.dataLabels=""):(t.highchartsPie.options.plotOptions.pie.showInLegend=!1,t.highchartsPie.options.plotOptions.pie.dataLabels={enabled:!0,format:"<b>{point.name}</b>: {point.percentage:.1f} %"})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW5fbW9kdWxlLmpzIiwiY29udHJvbGxlcnNcXGFib3V0Q3RybC5qcyIsImNvbnRyb2xsZXJzXFxtYWluQ3RybC5qcyIsInJvdXRlcnNcXG1haW5fcm91dGVyLmpzIiwiY29udHJvbGxlcnNcXGNoYXJ0c1xcM0QtY2hhcnQuanMiLCJjb250cm9sbGVyc1xcY2hhcnRzXFxhcmVhLWNoYXJ0LmpzIiwiY29udHJvbGxlcnNcXGNoYXJ0c1xcYmFyLWNoYXJ0LmpzIiwiY29udHJvbGxlcnNcXGNoYXJ0c1xccGllLWNoYXJ0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLEdBQUEscUJBQUEsUUFBQSxPQUFBLHVCQUFBLFlBQUEsaUJDR0EsU0FBQSxPQUFBLHVCQUFBLFdBQUEsYUFBQSxTQUFBLFNBQUEsR0FDQSxFQUFBLGVBQ0Esb0JBQ0EsWUFDQSxZQ0pBLFFBQUEsT0FBQSx1QkFBQSxXQUFBLFlBQUEsU0FBQSxlQ0NBLFFBQUEsT0FBQSx1QkFBQSxRQUFBLGlCQUFBLHFCQUFBLFNBQUEsRUFBQSxHQUVBLEVBQUEsVUFBQSxTQUVBLEVBQ0EsTUFBQSxRQUNBLElBQUEsUUFDQSxZQUFBLGtCQUNBLFdBQUEsYUFFQSxNQUFBLFNBQ0EsSUFBQSxTQUNBLFlBQUEsbUJBQ0EsV0FBQSxjQUVBLE1BQUEsWUFDQSxJQUFBLFlBQ0EsWUFBQSw4QkFDQSxXQUFBLGlCQUVBLE1BQUEsWUFDQSxJQUFBLFlBQ0EsWUFBQSw4QkFDQSxXQUFBLGlCQUVBLE1BQUEsV0FDQSxJQUFBLFdBQ0EsWUFBQSw2QkFDQSxXQUFBLGdCQUVBLE1BQUEsYUFDQSxJQUFBLGFBQ0EsWUFBQSwrQkFDQSxXQUFBLHFCQ2pDQSxRQUFBLE9BQUEsdUJBQUEsV0FBQSxlQUFBLFNBQUEsUUFBQSxTQUFBLEVBQUEsR0FlQSxRQUFBLEdBQUEsR0FDQSxFQUFBLGFBQUEsRUFHQSxFQUFBLEVBQUEsYUFBQSxRQUFBLE1BQUEsVUFBQSxNQUNBLEVBQUEsRUFBQSxhQUFBLFFBQUEsTUFBQSxVQUFBLEtBbEJBLEdBQUEsR0FBQSxLQUNBLEVBQUEsSUFHQSxHQUFBLElBQUEsb0JBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLFdBRUEsTUFBQSxTQUFBLEdBQ0EsUUFBQSxJQUFBLGtCQUFBLEtBYUEsRUFBQSxjQUFBLFdBQ0EsR0FBQSxJQUNBLEdBQUEsSUFDQSxRQUFBLElBQUEsR0FDQSxFQUFBLGFBQUEsUUFBQSxNQUFBLFVBQUEsTUFBQSxHQUlBLEVBQUEsY0FBQSxXQUNBLEdBQUEsR0FBQSxHQUNBLEdBQUEsSUFDQSxHQUFBLElBQ0EsUUFBQSxJQUFBLEdBQ0EsRUFBQSxhQUFBLFFBQUEsTUFBQSxVQUFBLE1BQUEsR0FJQSxFQUFBLGFBQUEsV0FDQSxHQUFBLElBQ0EsR0FBQSxJQUNBLFFBQUEsSUFBQSxHQUNBLEVBQUEsYUFBQSxRQUFBLE1BQUEsVUFBQSxLQUFBLEdBSUEsRUFBQSxhQUFBLFdBQ0EsR0FBQSxHQUFBLEVBQ0EsR0FBQSxJQUNBLEdBQUEsSUFDQSxRQUFBLElBQUEsR0FDQSxFQUFBLGFBQUEsUUFBQSxNQUFBLFVBQUEsS0FBQSxHQUlBLEVBQUEsVUFBQSxXQUlBLElBQUEsR0FGQSxNQUVBLEVBQUEsRUFBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLEtBQUEsS0FBQSxNQUFBLEdBQUEsS0FBQSxVQUFBLEVBR0EsSUFBQSxJQUNBLEtBQUEsY0FDQSxLQUFBLEVBQ0EsTUFBQSxpQkFHQSxHQUFBLGFBQUEsT0FBQSxLQUFBLEdBR0EsRUFBQSxhQUFBLE1BQUEsV0FBQSxLQUFBLGVBQ0EsUUFBQSxJQUFBLEVBQUEsa0JDNUVBLFFBQUEsT0FBQSx1QkFBQSxXQUFBLGlCQUFBLFNBQUEsUUFBQSxTQUFBLEVBQUEsR0FZQSxRQUFBLEdBQUEsR0FFQSxFQUFBLGVBQUEsQ0FLQSxLQUFBLEdBSEEsTUFHQSxFQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsQ0FDQSxJQUFBLEdBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUNBLEVBQUEsS0FBQSxLQUFBLE1BQUEsSUFBQSxLQUFBLFVBQUEsRUFJQSxHQUFBLGVBQUEsT0FBQSxHQUFBLEtBQUEsRUFHQSxNQXpCQSxFQUFBLElBQUEsb0JBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLGFBRUEsTUFBQSxTQUFBLEdBQ0EsUUFBQSxJQUFBLGtCQUFBLEtBeUJBLEVBQUEsY0FBQSxXQUNBLFNBQUEsRUFBQSxlQUFBLFFBQUEsTUFBQSxNQUdBLEVBQUEsZUFBQSxRQUFBLE9BQ0EsS0FBQSxTQUNBLE9BQUEsR0FDQSxXQUNBLFNBQUEsRUFDQSxNQUFBLEdBQ0EsS0FBQSxHQUNBLE1BQUEsS0FJQSxFQUFBLGVBQUEsUUFBQSxhQUNBLFFBQ0EsTUFBQSxLQUlBLEVBQUEsZUFBQSxPQUNBLFVBQUEsS0FNQSxFQUFBLGVBQUEsUUFBQSxPQUNBLEtBQUEsUUFHQSxFQUFBLGVBQUEsUUFBQSxhQUNBLE1BQ0EsV0FBQSxFQUNBLFFBQ0EsU0FBQSxFQUNBLE9BQUEsU0FDQSxPQUFBLEVBQ0EsUUFDQSxPQUNBLFNBQUEsT0FPQSxFQUFBLGVBQUEsT0FDQSxPQUNBLEtBQUEsb0JBT0EsRUFBQSxVQUFBLFdBSUEsSUFBQSxHQUZBLE1BRUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxJQUNBLEVBQUEsS0FBQSxLQUFBLE1BQUEsSUFBQSxLQUFBLFVBQUEsRUFJQSxHQUFBLGVBQUEsT0FBQSxNQUNBLEtBQUEsZ0JBQ0EsS0FBQSxRQ3JHQSxRQUFBLE9BQUEsdUJBQUEsV0FBQSxnQkFBQSxTQUFBLFFBQUEsU0FBQSxFQUFBLEdBWUEsUUFBQSxHQUFBLEdBQ0EsRUFBQSxjQUFBLEVBVkEsRUFBQSxJQUFBLG9CQUNBLFFBQUEsU0FBQSxHQUNBLEVBQUEsRUFBQSxZQUVBLE1BQUEsU0FBQSxHQUNBLFFBQUEsSUFBQSxrQkFBQSxLQVNBLEVBQUEsVUFBQSxXQUlBLElBQUEsR0FGQSxNQUVBLEVBQUEsRUFBQSxFQUFBLEVBQUEsSUFDQSxFQUFBLEtBQUEsS0FBQSxNQUFBLEdBQUEsS0FBQSxVQUFBLEVBSUEsR0FBQSxjQUFBLE9BQUEsTUFDQSxLQUFBLEtBTUEsRUFBQSxtQkFBQSxXQUNBLEdBQUEsR0FBQSxFQUFBLGNBQUEsT0FDQSxFQUFBLEtBQUEsTUFBQSxLQUFBLFNBQUEsRUFBQSxPQUNBLEdBQUEsT0FBQSxFQUFBLElBSUEsRUFBQSxTQUNBLEtBQUEsUUFJQSxFQUFBLGNBQUEsV0FFQSxFQUFBLGNBQUEsUUFBQSxNQUFBLEtBREEsU0FBQSxFQUFBLGNBQUEsUUFBQSxNQUFBLEtBQ0EsTUFFQSxXQ2pEQSxRQUFBLE9BQUEsdUJBQUEsV0FBQSxnQkFBQSxTQUFBLFFBQUEsU0FBQSxFQUFBLEdBWUEsUUFBQSxHQUFBLEdBQ0EsRUFBQSxjQUFBLEVBQ0EsUUFBQSxJQUFBLEVBQUEsZUFYQSxFQUFBLElBQUEsb0JBQ0EsUUFBQSxTQUFBLEdBQ0EsRUFBQSxFQUFBLFlBRUEsTUFBQSxTQUFBLEdBQ0EsUUFBQSxJQUFBLGtCQUFBLEtBVUEsRUFBQSxjQUFBLFdBRUEsT0FBQSxFQUFBLGNBQUEsT0FBQSxHQUFBLFdBR0EsRUFBQSxjQUFBLFFBQUEsWUFBQSxJQUFBLFdBQUEsTUFDQSxFQUFBLGNBQUEsUUFBQSxZQUFBLElBQUEsU0FBQSxLQUNBLEVBQUEsY0FBQSxPQUFBLEdBQUEsVUFBQSxRQUtBLEVBQUEsY0FBQSxRQUFBLFlBQUEsSUFBQSxXQUFBLE9BQ0EsRUFBQSxjQUFBLFFBQUEsWUFBQSxJQUFBLFNBQUEsTUFDQSxFQUFBLGNBQUEsT0FBQSxHQUFBLFVBQUEsT0FNQSxFQUFBLFdBQUEsV0FFQSxFQUFBLGNBQUEsUUFBQSxZQUFBLElBQUEsZ0JBQUEsR0FHQSxFQUFBLGNBQUEsUUFBQSxZQUFBLElBQUEsY0FBQSxFQUNBLEVBQUEsY0FBQSxRQUFBLFlBQUEsSUFBQSxXQUFBLEtBS0EsRUFBQSxjQUFBLFFBQUEsWUFBQSxJQUFBLGNBQUEsRUFDQSxFQUFBLGNBQUEsUUFBQSxZQUFBLElBQUEsWUFDQSxTQUFBLEVBQ0EsT0FBQSIsImZpbGUiOiJhcHBcXGFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogTWFpbiBtb2R1bGUgb2YgdGhlIGFwcGxpY2F0aW9uICovXG5cbnZhciBkYXRhcGluZVRlc3RUYXNrQXBwID0gYW5ndWxhci5tb2R1bGUoJ2RhdGFwaW5lVGVzdFRhc2tBcHAnLCBbJ3VpLnJvdXRlcicsICdoaWdoY2hhcnRzLW5nJ10pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqICMgQWJvdXRDdHJsXG4gKiBDb250cm9sbGVyIG9mIHRoZSBkYXRhcGluZVRlc3RUYXNrQXBwXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdkYXRhcGluZVRlc3RUYXNrQXBwJykuY29udHJvbGxlcignQWJvdXRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xuXHQgICAgJHNjb3BlLmF3ZXNvbWVUaGluZ3MgPSBbXG5cdCAgICAgICdIVE1MNSBCb2lsZXJwbGF0ZScsXG5cdCAgICAgICdBbmd1bGFySlMnLFxuXHQgICAgICAnS2FybWEnXG5cdCAgICBdO1xufSk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiAjIE1haW5DdHJsXG4gKiBDb250cm9sbGVyIG9mIHRoZSBkYXRhcGluZVRlc3RUYXNrQXBwXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdkYXRhcGluZVRlc3RUYXNrQXBwJykuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7fSk7XG5cbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiAjIE1haW4gcm91dGVyXHJcbiAqIFJvdGVyIG9mIHRoZSBkYXRhcGluZVRlc3RUYXNrQXBwXHJcbiAqL1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2RhdGFwaW5lVGVzdFRhc2tBcHAnKS5jb25maWcoZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuICAgICAgXHJcbiAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy9ob21lJyk7XHJcblxyXG4gICAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgIC5zdGF0ZSgnaG9tZScsIHtcclxuICAgICAgICAgIHVybDogJy9ob21lJyxcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvaG9tZS5odG1sJyxcclxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdNYWluQ3RybCdcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYWJvdXQnLCB7XHJcbiAgICAgICAgICB1cmw6ICcvYWJvdXQnLFxyXG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9hYm91dC5odG1sJyxcclxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdBYm91dEN0cmwnXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ2JhcmNoYXJ0Jywge1xyXG4gICAgICAgICAgdXJsOiAnL2JhcmNoYXJ0JyxcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY2hhcnRzL2Jhci1jaGFydC5odG1sJyxcclxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdCYXJjaGFydEN0cmwnXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ3BpZWNoYXJ0Jywge1xyXG4gICAgICAgICAgdXJsOiAnL3BpZWNoYXJ0JyxcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY2hhcnRzL3BpZS1jaGFydC5odG1sJyxcclxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdQaWVjaGFydEN0cmwnXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuc3RhdGUoJ2NoYXJ0M2QnLCB7XHJcbiAgICAgICAgICB1cmw6ICcvM2RjaGFydCcsXHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2NoYXJ0cy8zRC1jaGFydC5odG1sJyxcclxuICAgICAgICAgIGNvbnRyb2xsZXI6ICdjaGFydDNkQ3RybCdcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdGF0ZSgnYXJlYWNoYXJ0Jywge1xyXG4gICAgICAgICAgdXJsOiAnL2FyZWFjaGFydCcsXHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2NoYXJ0cy9hcmVhLWNoYXJ0Lmh0bWwnLFxyXG4gICAgICAgICAgY29udHJvbGxlcjogJ0FyZWFDaGFydEN0cmwnXHJcbiAgICAgICAgfSlcclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqICMgY2hhcnQzZEN0cmxcclxuICogQ29udHJvbGxlciBvZiB0aGUgZGF0YXBpbmVUZXN0VGFza0FwcFxyXG4gKi9cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkYXRhcGluZVRlc3RUYXNrQXBwJykuY29udHJvbGxlcignY2hhcnQzZEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCkge1xyXG5cclxuXHR2YXIgYW5nbGVBbHBoYSA9IG51bGw7ICAgICAvLyBmb3Igc3RvcmluZyBhbHBoYSBwYXJhbWV0ZXJcclxuXHR2YXIgYW5nbGVCZXRhID0gbnVsbDsgICAgICAvLyBmb3Igc3RvcmluZyBiZXRhIHBhcmFtZXRlclxyXG5cclxuXHQvLyBSZWFkIDNEIGNvbHVtbiBjaGFydCBkYXRhIGZyb20gSlNPTlxyXG5cdCRodHRwLmdldCgnY2hhcnRzLWRhdGEuanNvbicpXHJcblx0LnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcclxuXHRcdGNyZWF0ZTNkQ2hhcnQoZGF0YS5jaGFydDNEKTtcclxuXHR9KVxyXG5cdC5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0Y29uc29sZS5sb2coJ1JlcXVlc3QgZmFpbGVkOicgKyBkYXRhKTtcclxuXHR9KTtcclxuXHJcblx0Ly8gQ3JlYXRlIDNEIGNvbHVtbiBjaGFydFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZTNkQ2hhcnQgKGNoYXJ0RGF0YSkge1xyXG5cdFx0JHNjb3BlLmhpZ2hjaGFydHMzRCA9IGNoYXJ0RGF0YTtcclxuXHJcblx0XHQvLyBTdG9yZSBhbHBoYS9iZXRhIHZhbHVlc1xyXG5cdFx0YW5nbGVBbHBoYSA9ICRzY29wZS5oaWdoY2hhcnRzM0Qub3B0aW9ucy5jaGFydC5vcHRpb25zM2QuYWxwaGE7XHJcblx0XHRhbmdsZUJldGEgPSAkc2NvcGUuaGlnaGNoYXJ0czNELm9wdGlvbnMuY2hhcnQub3B0aW9uczNkLmJldGE7XHJcblx0fTtcclxuXHJcblx0Ly8gWm9vbSBpbiB2aWV3IGRpc3RhbmNlXHJcblx0JHNjb3BlLmFscGhhSW5jcmVhc2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRpZiAoYW5nbGVBbHBoYSA8IDM1KVxyXG5cdFx0XHRhbmdsZUFscGhhID0gYW5nbGVBbHBoYSArIDEwO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhhbmdsZUFscGhhKTtcclxuXHRcdFx0JHNjb3BlLmhpZ2hjaGFydHMzRC5vcHRpb25zLmNoYXJ0Lm9wdGlvbnMzZC5hbHBoYSA9IGFuZ2xlQWxwaGE7XHJcblx0fTtcclxuXHJcblx0Ly8gWm9vbSBvdXQgdmlldyBkaXN0YW5jZVxyXG5cdCRzY29wZS5hbHBoYURlY3JlYXNlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIHggPSAxNSAqICgtMSk7XHJcblx0XHRpZiAoYW5nbGVBbHBoYSA+IHgpXHJcblx0XHRcdGFuZ2xlQWxwaGEgPSBhbmdsZUFscGhhIC0gMTA7XHJcblx0XHRcdGNvbnNvbGUubG9nKGFuZ2xlQWxwaGEpO1xyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0czNELm9wdGlvbnMuY2hhcnQub3B0aW9uczNkLmFscGhhID0gYW5nbGVBbHBoYTtcclxuXHR9O1xyXG5cclxuXHQvLyBab29tIGluIHZpZXcgZGlzdGFuY2VcclxuXHQkc2NvcGUuYmV0YUluY3JlYXNlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0aWYgKGFuZ2xlQmV0YSA8IDQ1KVxyXG5cdFx0XHRhbmdsZUJldGEgPSBhbmdsZUJldGEgKyAxMDtcclxuXHRcdFx0Y29uc29sZS5sb2coYW5nbGVCZXRhKTtcclxuXHRcdFx0JHNjb3BlLmhpZ2hjaGFydHMzRC5vcHRpb25zLmNoYXJ0Lm9wdGlvbnMzZC5iZXRhID0gYW5nbGVCZXRhO1xyXG5cdH07XHJcblxyXG5cdC8vIFpvb20gb3V0IHZpZXcgZGlzdGFuY2VcclxuXHQkc2NvcGUuYmV0YURlY3JlYXNlID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIHkgPSA1ICogKC0xKTtcclxuXHRcdGlmIChhbmdsZUJldGEgPiB5KVxyXG5cdFx0XHRhbmdsZUJldGEgPSBhbmdsZUJldGEgLSAxMDtcclxuXHRcdFx0Y29uc29sZS5sb2coYW5nbGVCZXRhKTtcclxuXHRcdFx0JHNjb3BlLmhpZ2hjaGFydHMzRC5vcHRpb25zLmNoYXJ0Lm9wdGlvbnMzZC5iZXRhID0gYW5nbGVCZXRhO1xyXG5cdH07XHJcblxyXG5cdC8vIEFkZCByYW5kb20gU2VyaWVzXHJcbiAgICAkc2NvcGUuYWRkU2VyaWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgXHQvLyBGb3Igc3RvcmluZyBkZWYuIERhdGEgdmFsdWVzXHJcbiAgICBcdHZhciBkYXRhID0gW107XHJcbiAgICAgICAgLy9DcmVhdGUgcmFuZG9tIERhdGEgdmFsdWVzICAgXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgICAgICAgICAgZGF0YS5wdXNoKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKSArIDEpO1xyXG4gICAgICAgIH07XHJcblxyXG5cdFx0dmFyIHJuZCA9IHtcclxuXHRcdFx0bmFtZTogJ1JhbmRvbSB0ZWFtJyxcclxuXHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0c3RhY2s6ICdSYW5kb20gcHJvamVjdCdcclxuXHRcdH07XHJcbiAgICAgICAgLy8gQWRkIGRhdGEgd2l0aCByYW5kb20gU2VyaWVzIHRvIGNoYXJ0XHJcbiAgICAgICAgJHNjb3BlLmhpZ2hjaGFydHMzRC5zZXJpZXMucHVzaChybmQpO1xyXG5cclxuICAgICAgICAvLyBBZGQgcmFuZG9tIGNhdGVnb3J5XHJcbiAgICAgICBcdCRzY29wZS5oaWdoY2hhcnRzM0QueEF4aXMuY2F0ZWdvcmllcy5wdXNoKCdSYW5kb20gY3RnLicpO1xyXG4gICAgICAgXHRjb25zb2xlLmxvZygkc2NvcGUuaGlnaGNoYXJ0czNEKTtcclxuXHJcbiAgICB9O1xyXG5cclxufSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqICMgQXJlYWNoYXJ0Q3RybFxyXG4gKiBDb250cm9sbGVyIG9mIHRoZSBkYXRhcGluZVRlc3RUYXNrQXBwXHJcbiAqL1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2RhdGFwaW5lVGVzdFRhc2tBcHAnKS5jb250cm9sbGVyKCdBcmVhQ2hhcnRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHApIHtcclxuXHJcblx0Ly8gUmVhZCBBcmVhIGNoYXJ0IGRhdGEgZnJvbSBKU09OXHJcblx0JGh0dHAuZ2V0KCdjaGFydHMtZGF0YS5qc29uJylcclxuXHQuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0Y3JlYXRlQXJlYUNoYXJ0IChkYXRhLmFyZWFDaGFydCk7XHJcblx0fSlcclxuXHQuZXJyb3IoZnVuY3Rpb24gKGRhdGEpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdSZXF1ZXN0IGZhaWxlZDonICsgZGF0YSk7XHJcblx0fSk7XHJcblxyXG5cdC8vIENyZWF0ZSBBcmVhIGNoYXJ0XHJcblx0ZnVuY3Rpb24gY3JlYXRlQXJlYUNoYXJ0IChjaGFydERhdGEpIHtcclxuXHJcblx0XHQkc2NvcGUuaGlnaGNoYXJ0c0FyZWEgPSBjaGFydERhdGE7XHJcblx0XHQvLyBGb3Igc3RvcmluZyByYW5kb20gZGF0YSB2YWx1ZVxyXG5cdFx0dmFyIHJuZCA9IFtdOyAgXHJcblxyXG5cdFx0Ly8gR2VuZXJhdGUgcmFuZG9tIFwiZGF0YVwiIHZhbHVlcyBmb3IgdGhlIHR3byBcIlNlcmllc1wiIFxyXG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCAyOyBrKyspIHtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzNTsgaSsrKSB7XHJcblx0XHRcdFx0cm5kLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAxKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIEFkZCByYW5kb20gXCJkYXRhXCIgdG8gay1cIlNlcmllc1wiXHJcblx0XHRcdCRzY29wZS5oaWdoY2hhcnRzQXJlYS5zZXJpZXNba10uZGF0YSA9IHJuZDtcclxuXHRcdFx0XHJcblx0XHRcdC8vIENsZWFyIHJhbmRvbSB2YWx1ZSwgYmVmb3JlIHRoZSBuZXh0IGN5Y2xlXHJcblx0XHRcdHJuZCA9IFtdO1xyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHQvLyBTd2FwIGNoYXJ0IHR5cGVcclxuXHQkc2NvcGUuc3dhcENoYXJ0VHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGlmKCRzY29wZS5oaWdoY2hhcnRzQXJlYS5vcHRpb25zLmNoYXJ0LnR5cGUgPT09ICdhcmVhJykge1xyXG5cclxuXHRcdFx0Ly8gQ29uZmlndXJlIDNEIGNvbHVtbiBjaGFydFxyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c0FyZWEub3B0aW9ucy5jaGFydCA9IHtcclxuXHRcdFx0XHR0eXBlOiAnY29sdW1uJyxcclxuICAgICAgICAgICAgXHRtYXJnaW46IDc1LFxyXG4gICAgICAgICAgICBcdG9wdGlvbnMzZDoge1xyXG5cdCAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICBhbHBoYTogMTAsXHJcblx0ICAgICAgICAgICAgICAgIGJldGE6IDI1LFxyXG5cdCAgICAgICAgICAgICAgICBkZXB0aDogNzBcclxuICAgICAgICAgICAgXHR9XHRcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdCRzY29wZS5oaWdoY2hhcnRzQXJlYS5vcHRpb25zLnBsb3RPcHRpb25zID0ge1xyXG5cdFx0XHRcdGNvbHVtbjoge1xyXG4gICAgICAgICAgICAgICAgXHRkZXB0aDogMjVcclxuICAgICAgICAgICAgXHR9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c0FyZWEueUF4aXMgPSB7XHJcblx0XHRcdFx0b3Bwb3NpdGU6IHRydWVcclxuXHRcdFx0fTtcdFxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBEaXNjYXJkIDNEIGNvbHVtbiBjb25maWd1cmF0aW9uXHJcblx0XHRcdCRzY29wZS5oaWdoY2hhcnRzQXJlYS5vcHRpb25zLmNoYXJ0ID0ge1xyXG5cdFx0XHRcdHR5cGU6ICdhcmVhJ1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0JHNjb3BlLmhpZ2hjaGFydHNBcmVhLm9wdGlvbnMucGxvdE9wdGlvbnMgPSB7XHJcblx0XHRcdFx0YXJlYToge1xyXG5cdCAgICAgICAgICAgICAgICBwb2ludFN0YXJ0OiAwLFxyXG5cdCAgICAgICAgICAgICAgICBtYXJrZXI6IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMixcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c0FyZWEueUF4aXMgPSB7XHJcblx0XHRcdFx0dGl0bGU6IHtcclxuICAgICAgICAgICAgICAgIFx0dGV4dDogJ1JhbmRvbSB2YWx1ZXMnXHJcbiAgICAgICAgICAgIFx0fVxyXG5cdFx0XHR9O1x0XHRcdFxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8vIEFkZCByYW5kb20gc2VyaWVzXHJcblx0JHNjb3BlLmFkZFNlcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdC8vIEZvciBzdG9yaW5nIHJhbmRvbSBkYXRhIHZhbHVlXHJcblx0XHR2YXIgcm5kID0gW107ICBcclxuXHRcdC8vIEdlbmVyYXRlIHJhbmRvbSBcImRhdGFcIiB2YWx1ZXMgZm9yIHRoZSB0d28gXCJTZXJpZXNcIiBcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzNTsgaSsrKSB7XHJcblx0XHRcdFx0cm5kLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAxKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIEFkZCByYW5kb20gXCJkYXRhXCIgdG8gay1cIlNlcmllc1wiXHJcblx0XHRcdCRzY29wZS5oaWdoY2hhcnRzQXJlYS5zZXJpZXMucHVzaCh7XHJcblx0XHRcdFx0bmFtZTogJ1JhbmRvbSBzZXJpZXMnLFxyXG5cdFx0XHRcdGRhdGE6IHJuZFxyXG5cdFx0XHR9KTtcclxuXHJcblx0fTtcclxuXHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogIyBCYXJjaGFydEN0cmxcclxuICogQ29udHJvbGxlciBvZiB0aGUgZGF0YXBpbmVUZXN0VGFza0FwcFxyXG4gKi9cclxuXHJcbiBhbmd1bGFyLm1vZHVsZSgnZGF0YXBpbmVUZXN0VGFza0FwcCcpLmNvbnRyb2xsZXIoJ0JhcmNoYXJ0Q3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwKSB7XHJcblxyXG5cdCAgICAvLyBSZWFkIEJhciBjaGFydCBkYXRhIGZyb20gSlNPTiBmaWxlXHJcblx0ICAgICRodHRwLmdldCgnY2hhcnRzLWRhdGEuanNvbicpXHJcblx0ICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0ICAgIFx0Y3JlYXRlQmFyQ2hhcnQoZGF0YS5iYXJDaGFydCk7XHJcblx0ICAgIH0pXHJcblx0ICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xyXG5cdCAgICBcdGNvbnNvbGUubG9nKCAnUmVxdWVzdCBmYWlsZWQ6JyArIGRhdGEpO1xyXG5cdCAgICB9KTtcclxuXHQgICAgXHJcblx0ICAgIC8vIENyZWF0ZSBCYXIgY2hhcnRcclxuXHQgICAgZnVuY3Rpb24gY3JlYXRlQmFyQ2hhcnQgKGNoYXJ0RGF0YSkge1xyXG5cdCAgICBcdCRzY29wZS5oaWdoY2hhcnRzQmFyID0gY2hhcnREYXRhO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy8gQWRkIHJhbmRvbSBTZXJpZXNcclxuXHQgICAgJHNjb3BlLmFkZFNlcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgXHQvLyBkZWYuIGFycmF5IGZvciBzdG9yaW5nIHJhbmRvbSBTZXJpZXNcclxuXHQgICAgICAgIHZhciBybmQgPSBbXTtcclxuXHQgICAgICAgIC8vQ3JlYXRlIHJhbmRvbSBTZXJpZXMgICAgICAgIFxyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuXHQgICAgICAgICAgICBybmQucHVzaChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyMCkgKyAxKTtcclxuXHQgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgLy8gQWRkIGRhdGEgd2l0aCByYW5kb20gU2VyaWVzIHRvIGNoYXJ0XHJcblx0ICAgICAgICAkc2NvcGUuaGlnaGNoYXJ0c0Jhci5zZXJpZXMucHVzaCh7XHJcblx0ICAgICAgICBcdGRhdGE6IHJuZFxyXG5cdCAgICAgICBcdH0pO1xyXG5cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIC8vIFJlbW92ZSByYW5kb20gU2VyaWVzXHJcblx0ICAgICRzY29wZS5yZW1vdmVSYW5kb21TZXJpZXMgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgc2VyaWVzQXJyYXkgPSAkc2NvcGUuaGlnaGNoYXJ0c0Jhci5zZXJpZXM7XHJcblx0ICAgICAgICB2YXIgcm5kSWR4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VyaWVzQXJyYXkubGVuZ3RoKTtcclxuXHQgICAgICAgIHNlcmllc0FycmF5LnNwbGljZShybmRJZHgsIDEpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy8gQ2hhcnQgdHlwZSBMaW5lICh1c2VkIGZvciBzd2l0Y2hpbmcpXHJcblx0ICAgICRzY29wZS5vcHRpb25zID0ge1xyXG5cdCAgICAgICAgdHlwZTogJ2xpbmUnXHJcblx0ICAgIH07XHJcblxyXG5cdCAgICAvLyBTd2l0Y2ggYmV0d2VlbiBjaGFydHMgdHlwZXNcclxuXHQgICAgJHNjb3BlLnN3YXBDaGFydFR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBpZiAoJHNjb3BlLmhpZ2hjaGFydHNCYXIub3B0aW9ucy5jaGFydC50eXBlID09PSAnbGluZScpIHtcclxuXHQgICAgICAgICAgICAkc2NvcGUuaGlnaGNoYXJ0c0Jhci5vcHRpb25zLmNoYXJ0LnR5cGUgPSAnYmFyJ1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAkc2NvcGUuaGlnaGNoYXJ0c0Jhci5vcHRpb25zLmNoYXJ0LnR5cGUgPSAnbGluZSdcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcbiB9KTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogIyBQaWVjaGFydEN0cmxcclxuICogQ29udHJvbGxlciBvZiB0aGUgZGF0YXBpbmVUZXN0VGFza0FwcFxyXG4gKi9cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkYXRhcGluZVRlc3RUYXNrQXBwJykuY29udHJvbGxlcignUGllY2hhcnRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHApIHtcclxuXHJcblx0Ly8gUmVhZCBQaWUgY2hhcnQgZGF0YSBmcm9tIEpTT05cclxuXHQkaHR0cC5nZXQoJ2NoYXJ0cy1kYXRhLmpzb24nKVxyXG5cdC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0XHRjcmVhdGVQaWVDaGFydChkYXRhLnBpZUNoYXJ0KTtcclxuXHR9KVxyXG5cdC5lcnJvcihmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0Y29uc29sZS5sb2coJ1JlcXVlc3QgZmFpbGVkOicgKyBkYXRhKTtcclxuXHR9KTtcclxuXHJcblx0Ly8gQ3JlYXRlIFBpZSBjaGFydFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZVBpZUNoYXJ0IChjaGFydERhdGEpIHtcclxuXHRcdCRzY29wZS5oaWdoY2hhcnRzUGllID0gY2hhcnREYXRhO1xyXG5cdFx0Y29uc29sZS5sb2coJHNjb3BlLmhpZ2hjaGFydHNQaWUpO1xyXG5cdH07XHJcblxyXG5cdC8vIFN3YXAgY2hhcnQgdHlwZVxyXG5cdCRzY29wZS5zd2FwQ2hhcnRUeXBlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmICgkc2NvcGUuaGlnaGNoYXJ0c1BpZS5zZXJpZXNbMF0uaW5uZXJTaXplID09PSAnMCUnKSB7XHJcblxyXG5cdFx0XHQvLyBDb25maWd1cmUgU2VtaSBkb251dCBjaGFydFxyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c1BpZS5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5zdGFydEFuZ2xlID0gJy05MCc7XHJcblx0XHRcdCRzY29wZS5oaWdoY2hhcnRzUGllLm9wdGlvbnMucGxvdE9wdGlvbnMucGllLmVuZEFuZ2xlID0gJzkwJztcclxuXHRcdFx0JHNjb3BlLmhpZ2hjaGFydHNQaWUuc2VyaWVzWzBdLmlubmVyU2l6ZSA9ICc1MCUnO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBEaXNjYXJkIFNlbWkgZG9udXQgY29uZmlndXJhdGlvblxyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c1BpZS5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5zdGFydEFuZ2xlID0gJy0xODAnO1xyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c1BpZS5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5lbmRBbmdsZSA9ICcxODAnO1xyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c1BpZS5zZXJpZXNbMF0uaW5uZXJTaXplID0gJzAlJztcclxuXHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0Ly8gU2hvdy9IaWRlIExlZ2VuZCBvbiBjaGFydFxyXG5cdCRzY29wZS5zaG93TGVnZW5kID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmICgkc2NvcGUuaGlnaGNoYXJ0c1BpZS5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5zaG93SW5MZWdlbmQgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHQvLyBTaG93IExlZ2VuZFxyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c1BpZS5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5zaG93SW5MZWdlbmQgPSB0cnVlO1xyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c1BpZS5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5kYXRhTGFiZWxzID0gJyc7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIEhpZGUgbGVnZW5kXHJcblx0XHRcdCRzY29wZS5oaWdoY2hhcnRzUGllLm9wdGlvbnMucGxvdE9wdGlvbnMucGllLnNob3dJbkxlZ2VuZCA9IGZhbHNlO1xyXG5cdFx0XHQkc2NvcGUuaGlnaGNoYXJ0c1BpZS5vcHRpb25zLnBsb3RPcHRpb25zLnBpZS5kYXRhTGFiZWxzID0ge1xyXG5cdCAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcblx0ICAgICAgICAgICAgZm9ybWF0OiBcIjxiPntwb2ludC5uYW1lfTwvYj46IHtwb2ludC5wZXJjZW50YWdlOi4xZn0gJVwiXHJcblx0ICAgICAgICB9O1xyXG5cclxuXHRcdH07XHJcblx0fTtcclxuXHRcclxuXHJcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==