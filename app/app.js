var datapineTestTaskApp=angular.module("datapineTestTaskApp",["ui.router","highcharts-ng"]);angular.module("datapineTestTaskApp").controller("AboutCtrl",["$scope",function(t){t.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}]),angular.module("datapineTestTaskApp").controller("MainCtrl",["$scope",function(){}]),angular.module("datapineTestTaskApp").config(["$stateProvider","$urlRouterProvider",function(t,a){a.otherwise("/home"),t.state("home",{url:"/home",templateUrl:"views/home.html",controller:"MainCtrl"}).state("about",{url:"/about",templateUrl:"views/about.html",controller:"AboutCtrl"}).state("barchart",{url:"/barchart",templateUrl:"views/charts/bar-chart.html",controller:"BarchartCtrl"}).state("piechart",{url:"/piechart",templateUrl:"views/charts/pie-chart.html",controller:"PiechartCtrl"}).state("chart3d",{url:"/3dchart",templateUrl:"views/charts/3D-chart.html",controller:"chart3dCtrl"}).state("areachart",{url:"/areachart",templateUrl:"views/charts/area-chart.html",controller:"AreaChartCtrl"})}]),angular.module("datapineTestTaskApp").controller("chart3dCtrl",["$scope","$http",function(t,a){function e(a){t.highcharts3D=a,r=t.highcharts3D.options.chart.options3d.alpha,o=t.highcharts3D.options.chart.options3d.beta}var r=null,o=null;a.get("charts-data.json").success(function(t){e(t.chart3D)}).error(function(t){console.log("Request failed:"+t)}),t.alphaIncrease=function(){35>r&&(r+=10),t.highcharts3D.options.chart.options3d.alpha=r},t.alphaDecrease=function(){r>-15&&(r-=10),t.highcharts3D.options.chart.options3d.alpha=r},t.betaIncrease=function(){45>o&&(o+=10),t.highcharts3D.options.chart.options3d.beta=o},t.betaDecrease=function(){o>-5&&(o-=10),t.highcharts3D.options.chart.options3d.beta=o},t.addSeries=function(){for(var a=[],e=0;4>e;e++)a.push(Math.floor(20*Math.random())+1);var r={name:"Random team",data:a,stack:"Random project"};t.highcharts3D.series.push(r),t.highcharts3D.xAxis.categories.push("Random ctg.")}}]),angular.module("datapineTestTaskApp").controller("AreaChartCtrl",["$scope","$http",function(t,a){function e(a){t.highchartsArea=a;for(var e=[],r=0;2>r;r++){for(var o=0;35>o;o++)e.push(Math.floor(1e3*Math.random())+1);t.highchartsArea.series[r].data=e,e=[]}}a.get("charts-data.json").success(function(t){e(t.areaChart)}).error(function(t){console.log("Request failed:"+t)}),t.swapChartType=function(){"area"===t.highchartsArea.options.chart.type?(t.highchartsArea.options.chart={type:"column",margin:75,options3d:{enabled:!0,alpha:10,beta:25,depth:70}},t.highchartsArea.options.plotOptions={column:{depth:25}},t.highchartsArea.yAxis={opposite:!0}):(t.highchartsArea.options.chart={type:"area"},t.highchartsArea.options.plotOptions={area:{pointStart:0,marker:{enabled:!1,symbol:"circle",radius:2,states:{hover:{enabled:!0}}}}},t.highchartsArea.yAxis={title:{text:"Random values"}})},t.addSeries=function(){for(var a=[],e=0;35>e;e++)a.push(Math.floor(1e3*Math.random())+1);t.highchartsArea.series.push({name:"Random series",data:a})}}]),angular.module("datapineTestTaskApp").controller("BarchartCtrl",["$scope","$http",function(t,a){function e(a){t.highchartsBar=a}a.get("charts-data.json").success(function(t){e(t.barChart)}).error(function(t){console.log("Request failed:"+t)}),t.addSeries=function(){for(var a=[],e=0;6>e;e++)a.push(Math.floor(20*Math.random())+1);t.highchartsBar.series.push({data:a})},t.removeRandomSeries=function(){var a=t.highchartsBar.series,e=Math.floor(Math.random()*a.length);a.splice(e,1)},t.options={type:"line"},t.swapChartType=function(){t.highchartsBar.options.chart.type="line"===t.highchartsBar.options.chart.type?"bar":"line"}}]),angular.module("datapineTestTaskApp").controller("PiechartCtrl",["$scope","$http",function(t,a){function e(a){t.highchartsPie=a,console.log(t.highchartsPie)}a.get("charts-data.json").success(function(t){e(t.pieChart)}).error(function(t){console.log("Request failed:"+t)}),t.swapChartType=function(){"0%"===t.highchartsPie.series[0].innerSize?(t.highchartsPie.options.plotOptions.pie.startAngle="-90",t.highchartsPie.options.plotOptions.pie.endAngle="90",t.highchartsPie.series[0].innerSize="50%"):(t.highchartsPie.options.plotOptions.pie.startAngle="-180",t.highchartsPie.options.plotOptions.pie.endAngle="180",t.highchartsPie.series[0].innerSize="0%")},t.showLegend=function(){t.highchartsPie.options.plotOptions.pie.showInLegend===!1?(t.highchartsPie.options.plotOptions.pie.showInLegend=!0,t.highchartsPie.options.plotOptions.pie.dataLabels=""):(t.highchartsPie.options.plotOptions.pie.showInLegend=!1,t.highchartsPie.options.plotOptions.pie.dataLabels={enabled:!0,format:"<b>{point.name}</b>: {point.percentage:.1f} %"})}}]);
//# sourceMappingURL=data:application/json;base64,